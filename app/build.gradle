apply plugin: 'com.android.application'
//kotlin relation
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

def static getGitVersion() {
    def cmd = 'git rev-list HEAD --count'
    try {
        return cmd.execute().text.trim().toInteger()
    } catch (Throwable th) {
        return 1
    }
}

def static getBuildTime() {
    try {
        return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
    } catch (Throwable th) {
        return new Date().toLocaleString()
    }
}

android {
    compileSdkVersion rootProject.ext.androidVersion.compileSdkVersion
    buildToolsVersion rootProject.ext.androidVersion.buildToolsVersion
    resourcePrefix "app_"

    defaultConfig {

        applicationId rootProject.ext.androidVersion.applicationId
        minSdkVersion rootProject.ext.androidVersion.minSdkVersion
        targetSdkVersion rootProject.ext.androidVersion.targetSdkVersion
        versionCode getGitVersion()
        versionName rootProject.ext.androidVersion.versionName

//        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        externalNativeBuild {
//            cmake {
//                cppFlags ""
//            }
//        }

        buildConfigField "String", "GIT_HEAD", "\"${getGitVersion()}\""
        buildConfigField "String", "BUILD_TIME", "\"${getBuildTime()}\""

        flavorDimensions "pwflavor"
    }

    signingConfigs {
        release {
//            storeFile file(properties.getProperty("jdrobot.signing.keyfile"))
//            storePassword properties.getProperty("jdrobot.signing.password")
//            keyAlias properties.getProperty("jdrobot.signing.key.alias")
//            keyPassword properties.getProperty("jdrobot.signing.key.password")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled true
            shrinkResources true
            debuggable false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        //todo 3.0之后;each , outputFile -> all,outputFileName
        android.applicationVariants.all { variant ->    //批量修改Apk名字
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                def outDirectory = outputFile.parent

                if ("true".equals(IS_JENKINS)) {
                    //配合jenkins的打包路径;
                    outDirectory = properties.getProperty("app.output.dir")
                }
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = "pw-"
//                    fileName += getBuildTime() + "-"
                    if (!(variant.flavorName != null && variant.flavorName.equals(""))) {
                        fileName += variant.flavorName
                    }
                    if (!"release".equals(variant.buildType.name)) {
                        fileName += variant.buildType.name + "-"
                    }
                    if (!(variant.versionName != null && variant.versionName.equals(""))) {
                        fileName += variant.versionName
                    }
                    fileName += ".apk"
                    outputFileName = fileName
                }
            }
        }
    }


    compileOptions {
        incremental true //增量模型,可能对注解进程有影响;
        encoding "UTF-8"
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

//    externalNativeBuild {
//        cmake {
//            path "CMakeLists.txt"
//        }
//    }

    androidExtensions {
        experimental = true
    }

    productFlavors {
        //可提高编译速度;
        dev {
            //测试的版本;
            minSdkVersion 21
        }
        yingyongbao {
            //实际的版本;
            minSdkVersion rootProject.ext.androidVersion.minSdkVersion
        }
        yingyonghui {
            //实际的版本;
            minSdkVersion rootProject.ext.androidVersion.minSdkVersion
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "8g"
    }


}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'


    api project(path: ':lib_kit')
    api project(path: ':lib_gpuimage')
    api project(path: ':lib_floatwindow')

//    implementation 'androidx.appcompat:appcompat:1.0.2'
    //module import
    api project(path: ':module_welcome')
    api project(path: ':module_video')


}