if (isModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def static getGitVersion() {
    def cmd = 'git rev-list HEAD --count'
    try {
        return cmd.execute().text.trim().toInteger()
    } catch (Throwable th) {
        return 1
    }
}

android {
    compileSdkVersion rootProject.ext.androidVersion.compileSdkVersion
    buildToolsVersion rootProject.ext.androidVersion.buildToolsVersion
    resourcePrefix "mv_"

    defaultConfig {
        minSdkVersion rootProject.ext.androidVersion.minSdkVersion
        targetSdkVersion rootProject.ext.androidVersion.targetSdkVersion
        versionCode getGitVersion()
        versionName rootProject.ext.androidVersion.versionName

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

//        //ARouter
//        javaCompileOptions {
//            annotationProcessorOptions {
//                arguments = [moduleName: project.getName()]
//            }
//        }

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    androidExtensions {
        experimental = true
    }

    /**
     * 组件化资源配置
     */
    sourceSets {
        main {
            //组件化清单文件配置:
            def debugManifest = 'src/main/debug/AndroidManifest.xml'
            if (isModule.toBoolean() && project.file(debugManifest).exists()) {
                //debug模式下,加载独立的清单文件;
                manifest.srcFile debugManifest

                //debug模式下，如果存在src/main/debug/assets，则自动将其添加到assets源码目录
                if (project.file('src/main/debug/assets').exists()) {
                    assets.srcDirs = ['src/main/assets', 'src/main/debug/assets']
                }
                //debug模式下，如果存在src/main/debug/java，则自动将其添加到java源码目录
                if (project.file('src/main/debug/java').exists()) {
                    java.srcDirs = ['src/main/java', 'src/main/debug/java']
                }
                //debug模式下，如果存在src/main/debug/res，则自动将其添加到资源目录
                if (project.file('src/main/debug/res').exists()) {
                    res.srcDirs = ['src/main/res', 'src/main/debug/res']
                }
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                //集成开发模式下则需要排除debug文件夹中的所有Java文件
                java {
                    exclude 'src/main/debug/**'
                }
            }
        }

//        main {
//            manifest.srcFile 'AndroidManifest.xml'
//            java.srcDirs = ['src']
//            resources.srcDirs = ['src']
//            aidl.srcDirs = ['src']
//            renderscript.srcDirs = ['src']
//            res.srcDirs = ['res']
//            assets.srcDirs = ['assets']
//            jniLibs.srcDirs = ['libs']
//        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    api project(path: ':lib_kit')
    api project(path: ':lib_jiaozivideoplayer')


    implementation rootProject.ext.dependencies.ijkplayer_java
    implementation rootProject.ext.dependencies.ijkplayer_armv7a
    implementation rootProject.ext.dependencies.videocache_core
    implementation rootProject.ext.dependencies.exoplayer_core
}
